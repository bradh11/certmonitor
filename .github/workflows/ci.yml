name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust toolchain (for advanced crypto)
        uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: |
          uv sync --group dev
      - name: Check formatting
        run: |
          ruff format --check .
      - name: Lint
        run: |
          ruff check .
      - name: Build Rust extension
        run: |
          maturin build --release
      - name: Run tests
        run: |
          pytest --maxfail=2 --disable-warnings

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.local/bin:$PATH"
      - name: Install dependencies
        run: |
          uv sync --group docs
      - name: Build docs
        run: |
          mkdocs build --strict

  publish:
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [test, docs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.local/bin:$PATH"
      - name: Install build dependencies
        run: |
          uv sync --group dev
          uv pip install build twine
      - name: Build package
        run: |
          python -m build
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
