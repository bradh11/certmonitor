# Rust-specific CI workflow for the hybrid Python-Rust project
name: Rust CI

on:
  push:
    branches: [main, master]
    paths:
      - 'rust_certinfo/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [main, master]
    paths:
      - 'rust_certinfo/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

jobs:
  rust-checks:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "rust_certinfo -> target"

      - name: Check Rust formatting
        run: cargo fmt --all -- --check
        working-directory: rust_certinfo

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        working-directory: rust_certinfo

      - name: Run Rust tests
        run: cargo test --verbose
        working-directory: rust_certinfo

      - name: Run Rust benchmarks
        run: cargo bench --verbose
        working-directory: rust_certinfo
        if: matrix.rust == 'stable'

      - name: Check security advisories
        run: |
          cargo install cargo-audit
          cargo audit
        working-directory: rust_certinfo
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

  maturin-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.6.17"

      - name: Install maturin
        run: uv tool install maturin

      - name: Build Python extension
        run: |
          uv run maturin develop --release

      - name: Test Python integration
        run: |
          uv sync --group dev
          uv run python -c "import certmonitor.certinfo; print('Rust extension loaded successfully')"
